
begin transaction;
create table if not exists ninja_village
(
    id              int generated by default as identity,
    name            varchar(64) unique not null,
    description     varchar(2048),
    foundation_date date               not null default current_date check ( ninja_village.foundation_date <= current_date ),
    villager_id     int unique         not null,
    primary key (id)
);

create table if not exists villager
(
    id         int generated by default as identity,
    first_name varchar(64) not null,
    last_name  varchar(64) not null,
    birthday   date        not null check ( birthday <= current_date ),
    death_date date,
    village_id int         not null,
    primary key (id),
    constraint fk_villager_village_id foreign key (village_id) references ninja_village (id) on delete restrict,
    check ( death_date is null or (villager.birthday <= current_date and villager.birthday <= death_date))
);

create table if not exists ninja
(
    ninja_id int primary key,
    status   varchar(2) not null default 'AC',
    rank     varchar(2) not null default 'GN',
    clan_id  int,
    constraint fk_ninja_villager_id foreign key (ninja_id) references villager (id) on delete cascade
);

create table if not exists clan
(
    id          int generated by default as identity,
    name        varchar(64) not null unique,
    ninja_id    int         not null unique,
    -- NOTE: В PDM 1024
    description varchar(2048),
    primary key (id),
    constraint fk_clan_ninja_id foreign key (ninja_id) references ninja (ninja_id) on delete restrict
);

create table if not exists bidju
(
    id           int generated by default as identity,
    name         varchar(64) not null unique,
    tails_amount smallint    not null unique check ( tails_amount >= 1 ),
    description  varchar(2048),
    primary key (id)
);

create table if not exists jinchuuriki
(
    ninja_id  int primary key,
    bidju_id  int  not null,
    from_date date not null default current_date check ( from_date <= current_date ),
    to_date   date,
    constraint fk_jinch_ninja_id foreign key (ninja_id) references ninja (ninja_id) on delete cascade,
    constraint fk_jinch_bidju_id foreign key (bidju_id) references bidju (id) on delete cascade,
    check ( to_date is null or (from_date <= current_date and from_date <= to_date))
);

create table if not exists technique
(
    id   int generated by default as identity,
    name varchar(64) not null unique,
    primary key (id)
);

create table if not exists technique_requirement
(
    techniq_id    int,
    required_t_id int,
    primary key (techniq_id, required_t_id),
    constraint fk_tech_req_tech_id foreign key (techniq_id) references technique (id) on delete cascade,
    constraint fk_tech_req_req_tech_id foreign key (required_t_id) references technique (id) on delete cascade,
    check (techniq_id != technique_requirement.required_t_id)
);

create table if not exists skill
(
    ninja_id   int,
    techniq_id int,
    primary key (ninja_id, techniq_id),
    constraint fk_skill_ninja_id foreign key (ninja_id) references ninja (ninja_id) on delete cascade,
    constraint fk_skill_tech_id foreign key (techniq_id) references technique (id) on delete cascade
);

commit transaction;

begin transaction;

alter table ninja_village
    add constraint
        fk_nin_vil_villager foreign key (villager_id) references villager (id) on delete restrict;
alter table ninja
    add constraint fk_ninja_clan_id foreign key (clan_id) references clan (id) on delete set null;

-- из-за цикличной зависимости таблиц ninja_village и villager
alter table villager
    alter constraint fk_villager_village_id deferrable initially immediate;
alter table villager
    alter constraint fk_villager_village_id deferrable initially immediate;

commit transaction;

begin transaction;

-- Ниндзя состоящие в клане :clanId
create index if not exists idx_ninja__clan_id on ninja (clan_id);

-- Найти ниндзя по имени и фамилии

create index if not exists idx_ninja__fir_n_las_n on villager (first_name, last_name);

-- Найти всех жителей деревни
create index if not exists idx_villager__vill_id on villager (village_id);

-- Найти деревню по основателю
create index if not exists idx_nin_vil__vill_id on ninja_village (villager_id);

-- Найти клан по основателю
create index if not exists idx_clan__nin_id on clan (ninja_id);


-- Найти все техники для которых требуется данная техника
create index if not exists idx_tech_req__req_t_id on technique_requirement (required_t_id);

-- Найти всех ниндзя, которые владеют данной техникой
create index if not exists idx_skill__tech_id on skill (techniq_id);

-- Найти всех ниндзя которые когда либо были джинчуурики данного биджу
create index if not exists idx_jin__bidju_id on jinchuuriki (bidju_id);

commit transaction;
